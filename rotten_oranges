class Solution {
public:
    int solve(queue<pair<int, int>> rI, vector<vector<int>> &grid, int m, int n, int &c) {
        if (rI.size() == 0) return 0;
        queue<pair<int, int>> newrI;
        bool found = false;
        while (rI.size() > 0) {
            pair<int, int> index = rI.front();
            rI.pop();
            int i = index.first;
            int j = index.second;
            if (i - 1 >= 0 && grid[i - 1][j] == 1) {
                grid[i - 1][j] = 2;
                newrI.push({i - 1, j});
                c--;
                found = true;
            }
            if (i + 1 < m && grid[i + 1][j] == 1) {
                grid[i + 1][j] = 2;
                newrI.push({i + 1, j});
                c--;
                found = true;
            }
            if (j - 1 >= 0 && grid[i][j - 1] == 1) {
                grid[i][j - 1] = 2;
                newrI.push({i, j - 1});
                c--;
                found = true;
            }
            if (j + 1 < n && grid[i][j + 1] == 1) {
                grid[i][j + 1] = 2;
                newrI.push({i, j + 1});
                c--;
                found = true;
            }
        }
        if (found) return 1 + solve(newrI, grid, m, n, c);
        return solve(newrI, grid, m, n, c);
    }
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int, int>> rottenIndex;
        int countOfFresh = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    rottenIndex.push({i, j});
                } else if (grid[i][j] == 1) {
                    countOfFresh++;
                }
            }
        }
        int ans = solve(rottenIndex, grid, m, n, countOfFresh);
        if (countOfFresh > 0) return -1;
        return ans;
    }
};
