class Solution {
public:
    int trap(vector<int>& height) {
        vector<int> leftMax;
        vector<int> rightMax;
        int n = height.size();
        int lmax = 0;
        for (int i = 0; i < n; i++) {
            leftMax.push_back(lmax);
            if (height[i] > lmax) lmax = height[i];
        }
        int rmax = 0;
        for (int i = n - 1; i >= 0; i--) {
            rightMax.push_back(rmax);
            if (height[i] > rmax) rmax = height[i];
        }
        reverse(rightMax.begin(), rightMax.end());
        int water = 0;
        for (int i = 0; i < n; i++) {
            water += max(0, min(leftMax[i], rightMax[i]) - height[i]);
        }
        return water;
    }
};
