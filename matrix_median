int countLessThanTarget(vector<int> &arr, int n, int t) {
    int lb = 0;
    int ub = n - 1;
    int mid;
    while (lb <= ub) {
        mid = (lb + ub)/2;
        if (arr[mid] > t) {
            ub = mid - 1;
        } else {
            lb = mid + 1;
        }
    }
    return lb;
}

int Solution::findMedian(vector<vector<int> > &A) {
    int lb = 1;
    int ub = 1000000000;
    int m = A.size();
    int n = A[0].size();
    while (lb <= ub) {
        int mid = (lb + ub)/2;
        int count = 0;
        for (int i = 0; i < m; i++) {
            count += countLessThanTarget(A[i], n, mid);
        }
        if (count > (m*n)/2) {
            ub = mid - 1;
        } else {
            lb = mid + 1;
        }
    }
    return lb;
}
