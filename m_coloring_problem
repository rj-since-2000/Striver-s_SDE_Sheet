class Solution{
public:
    bool solve(bool graph[101][101], int m, int n, vector<int> &v, int node) {
        if (node == n) return true;
        for (int c = 1; c <= m; c++) {
            bool isValid = true;
            for (int i = 0; i < n; i++) {
                if (graph[node][i] && v[i] == c) {
                    isValid = false;
                    break;
                }
            }
            if (isValid) {
                v[node] = c;
                if (solve(graph, m, n, v, node + 1) == true) return true;
                v[node] = 0;
            }
        }
        return false;
    }
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int n) {
        vector<int> v(101, 0);
        return solve(graph, m, n, v, 0);
    }
};
