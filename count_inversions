#include <bits/stdc++.h> 

typedef long long ll;

long long merge(long long *arr, ll n, ll l, ll mid, ll r) {
    ll i = l;
    ll j = mid + 1;
    ll k = l;
    long long count = 0;
    ll temp[n];
    while (i <= mid && j <= r) {
        if (arr[i] <= arr[j]) {
            temp[k] = arr[i];
            k++;
            i++;
        } else {
            temp[k] = arr[j];
            k++;
            j++;
            count += mid - i + 1;
        }
    }
    while (i <= mid) {
        temp[k] = arr[i];
        k++;
        i++;
    }
    while (j <= r) {
        temp[k] = arr[j];
        k++;
        j++;
    }
    for (int p = l; p <= r; p++) {
        arr[p] = temp[p];
    }
    return count;
}

long long mergesort(long long *arr, ll n, ll l, ll r) {
    long long count = 0;
    if (l < r) {
        ll mid = (l+r)/2;
        count += mergesort(arr, n, l, mid);
        count += mergesort(arr, n, mid + 1, r);
        count += merge(arr, n, l, mid, r);
    }
    return count;
}

long long getInversions(long long *arr, int n){
    return mergesort(arr, n, 0, n - 1);
}
