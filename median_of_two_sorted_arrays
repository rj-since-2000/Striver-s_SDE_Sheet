class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        int k = (n + m)/2;
        int lb = max(0, k - m);
        int ub = min(k, n);
        int l1 ,l2, r1, r2;
        while (lb <= ub) {
            int mid1 = (lb + ub)/2;
            int mid2 = k - mid1;
            l1 = mid1 == 0 ? INT_MIN : nums1[mid1 - 1];
            l2 = mid2 == 0 ? INT_MIN : nums2[mid2 - 1];
            r1 = mid1 == n ? INT_MAX : nums1[mid1];
            r2 = mid2 == m ? INT_MAX : nums2[mid2];
            if (l1 <= r2 && l2 <= r1) {
                break;
            } else if (l1 > r2) {
                ub = mid1 - 1;
            } else if (l2 > r1) {
                lb = mid1 + 1;
            }
        }
        if ((n + m)%2 == 0) return (max(l1, l2) + min(r1, r2))/2.0;
        else return min(r1, r2);
    }
};
