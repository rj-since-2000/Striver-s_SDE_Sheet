class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            map[nums[i]]++;
        }
        priority_queue<pair<int, int>> maxHeap;
        for (int i = 0; i < nums.size(); i++) {
            if (map[nums[i]] > 0) {
                maxHeap.push(make_pair(map[nums[i]], nums[i]));
                map[nums[i]] = 0;
            }
        }
        vector<int> ans;
        while (k-- && !maxHeap.empty()) {
            ans.push_back(maxHeap.top().second);
            maxHeap.pop();
        }
        return ans;
    }
};
