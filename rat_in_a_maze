class Solution{
    public:
    void solve(vector<string> &ans, string s, vector<vector<int>> &m, vector<vector<bool>> &visited, int n, int i, int j) {
        if (i == n - 1 && j == n - 1) {
            ans.push_back(s);
            return;
        }
        if (i - 1 >= 0 && !visited[i - 1][j] && m[i - 1][j] == 1) {
            visited[i - 1][j] = true;
            solve(ans, s + 'U', m, visited, n, i - 1, j);
            visited[i - 1][j] = false;
        }
        if (i + 1 < n && !visited[i + 1][j] && m[i + 1][j] == 1) {
            visited[i + 1][j] = true;
            solve(ans, s + 'D', m, visited, n, i + 1, j);
            visited[i + 1][j] = false;
        }
        if (j - 1 >= 0 && !visited[i][j - 1] && m[i][j - 1] == 1) {
            visited[i][j - 1] = true;
            solve(ans, s + 'L', m, visited, n, i, j - 1);
            visited[i][j - 1] = false;
        }
        if (j + 1 < n && !visited[i][j + 1] && m[i][j + 1] == 1) {
            visited[i][j + 1] = true;
            solve(ans, s + 'R', m, visited, n, i, j + 1);
            visited[i][j + 1] = false;
        } 
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        string s = "";
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        visited[0][0] = true;
        if (m[0][0] == 1) solve(ans, s, m, visited, n, 0, 0);
        return ans;
    }
};
